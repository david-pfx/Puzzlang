/// Puzzlang is a pattern matching language for abstract games and puzzles. See http://www.polyomino.com/puzzlang.
///
/// Copyright © Polyomino Games 2018. All rights reserved.
/// 
/// This is free software. You are free to use it, modify it and/or 
/// distribute it as set out in the licence at http://www.polyomino.com/licence.
/// You should have received a copy of the licence with the software.
/// 
/// This software is distributed in the hope that it will be useful, but with
/// absolutely no warranty, express or implied. See the licence for details.
/// 
// PEG grammar for Puzzlang files

@namespace PuzzLangLib
@accessibility internal
@classname PuzzLangParser
@ignorecase false
@start StartRule
@trace true
@using System.Linq
@using DOLE

//------------------------------------------------------------------------------
StartRule 
    = PreludeSection Section+ EOLC* EOF { "ok" }

Section 
    = EOLC* (ObjectSection / LegendSection / SoundSection / CollisionLayerSection / RuleSection 
    / WinConditionSection / LevelSection 
    / !EOF #error{ "syntax error" })

//------------------------------------------------------------------------------
PreludeSection = ( Setting / EOLC )*
Setting 
    = v:SettingName w:AnyText EOLC { DefSetting(state,v,w) }
    / v:SettingName EOLC { DefSetting(state,v,"true") }
    / "no"i v:SettingName EOLC { DefSetting(state,v,"false") }

//------------------------------------------------------------------------------
ObjectSection 
    = OBJECTS ( EOLC* !SectionStart ObjectLine )*
ObjectLine 
    = WSC v:CanDefine w:Glyph? x:Justify* y:FloatNumber? EOLX
      z:ColourExp+ EOLX EOLC*       // blank line(s) permitted before sprite lines
      a:MessageLine? b:SpriteLine* { DefObject(state,v,Single(w),x,Single(y),z,Single(a),b) }
MessageLine
    = MESSAGE v:AnyText EOLW { v }

//ObjectLine 
//    = WSC v:CanDefine w:Glyph? x:Justify* y:FloatNumber? EOLX
//      z:ColourExp+ EOLX EOLC*       // blank line(s) permitted before sprite lines
//      zz:ContentLines { DefObject(state,v,Single(w),x,Single(y),z,zz) }
//ContentLines<IList<string>>
//    = MESSAGE v:AnyText EOLW { new List<string> { "?" + v } }
//    / v:SpriteLine* { v }

SpriteLine 
    = v:SpriteChar<2,> EOLC { String.Concat(v.ToArray()) }       // backtrack here to next object
ColourExp 
    = WSC v:ColourValue &{ IsColour(v) } { v }
    / WSC v:ColourValue #error{ $"colour expected: '{v}'" }

//------------------------------------------------------------------------------
LegendSection 
    = LEGEND ( EOLC* !SectionStart LegendLine )*
LegendLine 
    = WSC v:IdOrGlyph WSC EQ w:DefinedExp<1,,WSO OR> EOLC { DefLegend(v,w,"or") }
    / WSC v:IdOrGlyph WSC EQ w:DefinedExp<1,,WSO AND> EOLX { DefLegend(v,w,"and") }

//------------------------------------------------------------------------------
SoundSection = SOUNDS ( EOLC* !SectionStart SoundLine )*
SoundLine
    = WSC v:Defined? 
        w:(SoundTriggerIdent / e:Token #error{ $"sound word expected: '{e}'" }) 
        x:RuleDirectionIdent*
        y:("" [0-9]+ / e:Token #error{ $"seed expected: '${e}'" })
        EOLX { DefSound(Single(v),w,x,y) }

//------------------------------------------------------------------------------
CollisionLayerSection = COLLISIONLAYERS ( EOLC* !SectionStart CollisionLine )*
CollisionLine 
    = v:( (w:DefinedExp CMA?) { w } )+ EOLX { DefCollision(state,v) }

//------------------------------------------------------------------------------
RuleSection = RULES ( EOLC* !SectionStart RuleLine )*
RuleLine 
    = WSC v:RULELOOP EOLX { Loop(state,v) }
    / WSC v:RulePrefixIdent* w:RuleSeq* RAexp x:RuleSeq* y:RuleEnd* EOLX { DefRule(state,v,w,x,y) }
    / WSC v:Ident #error{ $"expected move prefix or direction: {v}" }
RuleSeq<SubRule>
    = WSC v:RuleDirectionIdent* LB w:RuleCell<0,,WSC VB> RBexp { DefSubRule(v,w) }
    / WSC v:RuleDirectionIdent #error{ $"expected direction or left bracket: {v}" }
RuleCell<IList<RuleAtom>>
    = ELLIP             { DefRuleCell("...") }  //  must be first
    / WSC v:RuleMatch+  { v }
    / WSC &( VB / RB )  { DefRuleCell(null) }
    / #error{ $"object or command expected" }   // no backtrack, already accepted LB
RuleMatch<RuleAtom>
    = v:NO? w:MoveDirectionIdent x:RuleObject y:CommandIdent?  { DefRuleCell(Single(v),w,x,Single(y)) }
    / NO? MoveDirectionIdent #error{ $"object expected" }
    / v:NO? x:RuleObject y:CommandIdent?                       { DefRuleCell(Single(v),null,x,Single(y)) }
    / v:NO? y:CommandIdent                                  { DefRuleCell(Single(v),null,null,y) }
RuleEnd
    = v:MESSAGE w:AnyText? { $"?{Single(w)}" }
    / CommandIdent
    / Ident #error{ $"move command expected" }        // no backtrack, accepted RA
RuleObject = !LB !VB !RB !RA v:Defined { v }
RAexp = RA / #error{ "right arrow expected" }
RBexp = RB / #error{ "right bracket expected" }
EOLX = EOLC / v:AnyText #error{ $"end of line expected: '{v}'" }

//------------------------------------------------------------------------------
WinConditionSection = WINCONDITIONS ( EOLC* !SectionStart WinLine )*
WinLine 
    = WSC v:WinActionExp w:DefinedExp ON x:DefinedExp EOLX { DefWinCondition(v,w,x) }
    / WSC v:WinActionExp w:DefinedExp                 EOLX { DefWinCondition(v,w,null) }
WinActionExp
    = v:Ident &{ IsWinAction(v) } { v }
    / v:Ident #error{ $"win action expected: {v}" }

//------------------------------------------------------------------------------
LevelSection = LEVELS ( EOLC* !SectionStart Level )*
Level 
    = MESSAGE v:AnyText? EOLW { DefMessage(Single(v)) }
    / LegendLine
    / v:LevelLine+ { DefLevel(state,v) }
LevelLine = v:(!LP LEVELCHAR)+ EOLW { String.Concat(v.ToArray()) }  // .NET 3.5

//------------------------------------------------------------------------------

// complex tokens

CanDefine
    = v:IdOrGlyph !{ IsDefined(v) } { v }
    / v:IdOrGlyph #error{ $"'{v}' already defined" }
DefinedExp 
    = Defined
    / v:IdOrGlyph #error{ $"'{v}' not defined" }
Defined
    = v:IdOrGlyph &{ IsDefined(v) } { v }

SettingName = v:Ident &{ IsSetting(v) } { v }
RulePrefixIdent = v:( Ident / . ) WSO &{ IsRulePrefix(v) } { v }  // includes '+'
RuleDirectionIdent = v:Ident &{ IsRuleDirection(v) } { v }
MoveDirectionIdent = v:( Ident / . ) WSO &{ IsMoveDirection(v) } { v } // includes '>' etc
CommandIdent =  v:Ident &{ IsRuleCommand(v) } { v }
SoundTriggerIdent =  v:Ident &{ IsSoundTrigger(v) } { v }
Justify = v:Ident &{ IsJustify(v) } { v }

// simple tokens
ColourValue = v:( HexNumber / "" Letter+ ) WSC { v }
Token = "" LEVELCHAR*
Glyph = v:LEVELCHAR !LEVELCHAR { v }
IdOrGlyph = v:( IdChar IdChar* / LEVELCHAR ) WSC { v }
Ident = v:( IdChar IdChar* ) WSC { v }
AnyText = v:("" ( !CC . )+ ) { v.Trim() }
HexNumber = "#" HexDigit+ 
FloatNumber = v:( Digit+ "." Digit+ / "" Digit+ ) IDX { v }

SectionStart = OBJECTS / LEGEND / SOUNDS / COLLISIONLAYERS / RULES / WINCONDITIONS / LEVELS

// reserved words
OBJECTS			= v:"objects"i           EOLC { v }
LEGEND			= v:"legend"i            EOLC { v }
SOUNDS			= v:"sounds"i            EOLC { v }
COLLISIONLAYERS = v:"collisionlayers"i   EOLC { v }
RULES			= v:"rules"i             EOLC { v }
WINCONDITIONS	= v:"winconditions"i     EOLC { v }
LEVELS			= v:"levels"i            EOLC { v }
RULELOOP = v:( "startloop"i / "endloop"i ) IDX { v }
MESSAGE = "message"i IDX
ON = "on"i IDX
AND = "and"i IDX
OR = "or"i IDX
NO = "no"i IDX

// Various kinds of whitespace
//CommentInline = SP* "//" (!CC .)*
CommentBlock = SP* LP ( !RP ( &LP CommentBlock / . ) )* RP
CommentLine = SP* "==" ( !CC . )* CR? LF

WSC = CommentBlock* SP* { "" }      // wherever optional whitespace permitted (discarded)
EOLC = CommentBlock* EOLW { "" }    // end of line, comment allowed (discarded)
EOLW = SP* CR? LF CommentLine* { Eol(state) }    // end of line, comment not allowed (discarded)
IDX = !IdChar SP* { "" }            // end of ident possibly followed by WS (discarded)

// character sets (not tokens)
IdChar = Letter / Digit / IdCharX
Letter = [a-zA-Z];
Digit = [0-9];
HexDigit = [a-fA-F0-9];
SpriteChar = [.0-9] 
IdCharX = [_$];
LEVELCHAR = [\x21-\xfe\u0100-\uffff]

EQ = "=" WSO
LP = "(" WSO
RP = ")" WSO
LB = "[" WSO
RB = "]" WSO
VB = "|" WSO
RA = "->" WSO
CMA = "," WSO
ELLIP = "..." WSO
WSO =  SP* { "" }

CC = [\x00-\x1f]
SP = [ \t] 
CR = "\r"
LF = "\n" 
EOF = !.
